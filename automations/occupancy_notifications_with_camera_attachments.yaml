---
blueprint:
  name: Occupancy Notification with Camera Snapshot and Clear Notification
  description: >
    Notify selected devices when occupancy is detected, send a camera
    snapshot, dynamically link to Lovelace page, and clear the notification when
    occupancy ends. Customizable notification conditions.
  domain: automation
  input:
    occupancy_sensors:
      name: Occupancy Entities
      description: Select the entity/entities that will trigger the notifications
        (should toggle between 'on' and 'off')
      selector:
        entity:
          multiple: true
          domain: switch, binary_sensor, input_boolean
    notification_devices:
      name: iOS Devices to Notify
      description: Select the iOS device(s) that will receive the notifications
      selector:
        device:
          integration: mobile_app
          manufacturer: Apple
          multiple: true
    notify_condition_template:
      name: Notification Condition Template
      description: A template that evaluates whether the notification should be sent.
        If left blank, notifications will always be sent.
      default: "{{ true }}"
      selector:
        template: null
    lovelace_area_path:
      name: Lovelace Area Path
      description: The Lovelace path for the camera dashboard (e.g., /lovelace/area/cameras)
      default: /lovelace/cameras/{{ area | lower | replace(' ', '-') }}
      selector:
        text: null
mode: single
trigger:
  - platform: state
    entity_id: occupancy_sensors
    to: on
  - platform: state
    entity_id: occupancy_sensors
    to: off
variables:
  area: "{{ area_name(trigger.entity_id) }}"
  timestamp: "{{ trigger.to_state.last_changed.strftime('%Y-%m-%d %H:%M:%S') }}"
  camera_entity: |
    {{ area_entities(area) | select('search', 'camera') | first }}
condition:
  - condition: template
    value_template: notify_condition_template
action:
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ trigger.to_state.state == 'on' }}"
        sequence:
          - device_id: notification_devices
            domain: mobile_app
            type: notify
            message: Occupancy detected in {{ area }} at {{ timestamp }}.
            data:
              push:
                thread-id: occupancy_{{ area | lower | replace(' ', '_') }}
                id: occupancy_{{ area | lower | replace(' ', '_') }}
              image: "{{ state_attr(camera_entity, 'entity_picture') }}"
              clickAction: lovelace_area_path
      - conditions:
          - condition: template
            value_template: "{{ trigger.to_state.state == 'off' }}"
        sequence:
          - device_id: notification_devices
            domain: mobile_app
            type: notify
            message: The previous occupancy at {{ timestamp }} in {{ area }} has now
              cleared.
            data:
              push:
                thread-id: occupancy_{{ area | lower | replace(' ', '_') }}
                id: occupancy_{{ area | lower | replace(' ', '_') }}
              image: "{{ state_attr(camera_entity, 'entity_picture') }}"
              clickAction: lovelace_area_path
